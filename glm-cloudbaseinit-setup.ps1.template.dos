# (C) Copyright 2024 Hewlett Packard Enterprise Development LP

# taken from https://blog.v12n.io/automating-the-installation-of-cloudbase-init-in-windows-templates-using-packer/
# with some local modifications

$msiFileName = 'cloudbaseinitsetup.msi'


# Install Cloudbase-Init
Start-Process msiexec.exe -ArgumentList "/i C:\downloads\$msiFileName /passive /norestart RUN_SERVICE_AS_LOCAL_SYSTEM=1" -Wait

# Customise the cloudbase-init.conf file.
$confFile = 'cloudbase-init.conf'
$confPath = "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\conf\"

$confContent = @"
[DEFAULT]
bsdtar_path=C:\Program Files\Cloudbase Solutions\Cloudbase-Init\bin\bsdtar.exe
mtools_path=C:\Program Files\Cloudbase Solutions\Cloudbase-Init\bin\
verbose=true
debug=true
logdir=C:\Program Files\Cloudbase Solutions\Cloudbase-Init\log\
logfile=cloudbase-init.log
default_log_levels=comtypes=INFO,suds=INFO,iso8601=WARN,requests=WARN
local_scripts_path=C:\Program Files\Cloudbase Solutions\Cloudbase-Init\LocalScripts\
username=GreenLakeAdmin
rename_admin_user=true
# Services that will be tested for loading until one of them succeeds.
metadata_services=cloudbaseinit.metadata.services.nocloudservice.NoCloudConfigDriveService
plugins= cloudbaseinit.plugins.common.networkconfig.NetworkConfigPlugin, cloudbaseinit.plugins.windows.createuser.CreateUserPlugin, cloudbaseinit.plugins.common.mtu.MTUPlugin, cloudbaseinit.plugins.windows.ntpclient.NTPClientPlugin, cloudbaseinit.plugins.common.sethostname.SetHostNamePlugin, cloudbaseinit.plugins.windows.licensing.WindowsLicensingPlugin, cloudbaseinit.plugins.common.sshpublickeys.SetUserSSHPublicKeysPlugin, cloudbaseinit.plugins.windows.winrmlistener.ConfigWinRMListenerPlugin, cloudbaseinit.plugins.common.userdata.UserDataPlugin, cloudbaseinit.plugins.common.localscripts.LocalScriptsPlugin

[config_drive]
# Which devices to inspect for a possible configuration drive
types=vfat
locations=partition
"@

New-Item -Path $confPath -Name $confFile -ItemType File -Force -Value $confContent | Out-Null

# Add delay in network config
$OldContent = Get-Content -Path "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\Python\Lib\site-packages\cloudbaseinit\osutils\windows.py"
$NewContent = foreach ($line in $OldContent) {
    if ($line -eq "        conn.MSFT_NetIPAddress.create(") {
        "        "
        "        time.sleep(10)"
        "        "
    }
    $line
}
Set-Content -Path "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\Python\Lib\site-packages\cloudbaseinit\osutils\windows.py" -Value $NewContent

# Configure the Windows service for Cloudbase-Init.
Start-Process sc.exe -ArgumentList "config cloudbase-init start= delayed-auto" -wait | Out-Null

# Remove extraneous config files.
Remove-Item -Path ($confPath + "cloudbase-init-unattend.conf") -Confirm:$false
Remove-Item -Path ($confPath + "Unattend.xml") -Confirm:$false

# Remove the .msi installation file.
Remove-Item C:\downloads\$msiFileName -Confirm:$false -Force

#Install MultipathIO without a reboot
Enable-WindowsOptionalFeature -Online -NoRestart -FeatureName MultipathIO
#enable Multipathio
Set-Service -Name MSiSCSI -StartupType Automatic

# If you want to run more commands at the end of CloudBase-Init's execution, you can create those scripts here.
# Note: These scripts will run every time CloudBase-Init starts. Make sure you write your script accordingly.
# As an example these lines of code will create a PowerShell script named DeployTime.ps1 in the LocalScripts directory
#   When CloudBase-Init runs the LocalScriptsPlugin, this script will get executed and create a file with the current time
#   if that file doesn't already exist.
@'
If (-Not (Test-Path -Path "C:\DeployTime.txt" -PathType leaf)) {
    $(Get-Date).ToString() | Out-File -FilePath "C:\DeployTime.txt"
}
'@ | Out-File -FilePath "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\LocalScripts\DeployTime.ps1"

# Make each VLAN use a fixed MAC address
{{- if .Connections}}
  {{- $fabric := ""}}
  {{- $macnocolon := "" }}
  {{- range .Connections}}
    {{/* Get MAC address of 1st .Interface */}}
    {{- $mac := (index .Interfaces 0).HWAddr }}

    {{/* Convert MAC addr from GLM format d0:67:26:0a:e9:ac to Windows d067260ae9ac format */}}
    {{- $mac1 := slice $mac 0 2 }}
    {{- $mac2 := slice $mac 3 5 }}
    {{- $mac3 := slice $mac 6 8 }}
    {{- $mac4 := slice $mac 9 11 }}
    {{- $mac5 := slice $mac 12 14 }}
    {{- $mac6 := slice $mac 15 17 }}
    {{- $macnocolon = printf "%s%s%s%s%s%s" $mac1 $mac2 $mac3 $mac4 $mac5 $mac6 }}

    {{/* Use the Name from .Connections */}}
    {{- $fabric = .Name }}

# Set the MAC address on the Team interface for untagged network
@'
Set-NetAdapterAdvancedProperty -Name "{{ $fabric }}" -DisplayName "MAC Address" -DisplayValue "{{ $macnocolon }}"
'@ | Out-File -Encoding Ascii -Append -FilePath "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\LocalScripts\SetMacAddress.ps1"

# Set the MAC address of each VLAN tagged network
    {{- range .Networks }}
@'
Set-NetAdapterAdvancedProperty -Name "{{ $fabric }}.{{ .VID }}" -DisplayName "MAC Address" -DisplayValue "{{ $macnocolon }}"
'@ | Out-File -Encoding Ascii -Append -FilePath "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\LocalScripts\SetMacAddress.ps1"
    {{- end }} {{/* end range .Networks */}}
  {{- end}}  {{/* end range .Connections  */}}
{{- end}}    {{/* end if .Connections */}}

# Setting the CloudBase-Init service to Disabled so it will not run on future boots and reset settings that were
# manually configured after boot, such as manually reset GreenlakeAdmin password
@'
Set-Service -Name cloudbase-init -StartupType Disabled
'@ | Out-File -FilePath "C:\Program Files\Cloudbase Solutions\Cloudbase-Init\LocalScripts\DisableCloudBaseInit.ps1"

